from helper.parsing import parse_contour_file, parse_dicom_file,poly_to_mask
import glob
import os
from PIL import Image
from helper.evaluate_match import contour_method,get_contour
import numpy as np
import cv2
def match_dic_2_contour(dic_folder,contour_file,test=False, truth=None):

    """
    summary: a polygon is compared to the contour generated by cv2 for each DICOM file given a patient ID.
    inputs:
         dic_folder: a full path to a folder for a set of DICOM files for a patient
         contour_file: a full path to a contour file for the same patient
    output: a tuple of image and mask; For testing, the true polygon is plot on the contour generated by cv2 

    to_do: to search a more appropriate way to evaluate the similarity between two contours
    """
    #load all DICOM in the dic_folder
    dic_paths = glob.glob(dic_folder+os.sep+"*.dcm")
    dics = []
    for dic_path in dic_paths:
        dics.append(parse_dicom_file(dic_path))
    
    # get the polygon
    polygon = parse_contour_file(contour_file)
    
    # compare the polygon with each image
    scores = []
    for dic in dics:
        score = contour_method(dic['pixel_data'], polygon)
        scores.append(score)
    # a threshold on the maximum score is to be determined
    index = np.argmax(score)
    print("true index",  dic_paths[index].split("/")[-1]) 
    height, width = dics[index]['pixel_data'].shape
    mask = poly_to_mask(polygon,width,height)

    if test:
        img = dics[index]['pixel_data']
        contour = get_contour(img)
        cv2.polylines(contour, np.int32([polygon]), 4, (255,255,0))
        cv2.imwrite("../../out_data/tmp/tmp.jpg",contour*110)
        return dic_paths[index].split("/")[-1]== truth
    else:
        return (dics[index]['pixel_data'] ,mask)


if __name__=="__main__":
    dic_folder = "../../final_data/dicoms/SCD0000101"
    contour_file = "../../final_data/contourfiles/SC-HF-I-1/i-contours/IM-0001-0048-icontour-manual.txt"
    
    match_dic_2_contour(dic_folder,contour_file,True)
